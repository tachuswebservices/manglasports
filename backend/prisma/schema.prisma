generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int        @id @default(autoincrement())
  email                 String     @unique
  password              String
  name                  String?
  createdAt             DateTime   @default(now())
  role                  String     @default("user")
  resetToken            String?    @unique
  resetTokenExpiry      DateTime?
  addresses             Address[]
  cart                  Cart[]
  orders                Order[]
  wishlist              Wishlist[]
  reviews               Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id               String          @id
  name             String
  price            String
  numericPrice     Float
  categoryId       Int
  brandId          Int
  rating           Float
  reviewCount      Int?
  soldCount        Int?
  inStock          Boolean
  isNew            Boolean?
  isHot            Boolean?
  shortDescription String?
  gst              Float           @default(18)
  images           Json
  offerPrice       Float           @default(0)
  cart             Cart[]
  features         Feature[]
  orderItems       OrderItem[]
  brand            Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category         Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  specifications   Specification[]
  wishlist         Wishlist[]
  reviews          Review[]
}

model Feature {
  id        Int     @id @default(autoincrement())
  value     String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Specification {
  id        Int     @id @default(autoincrement())
  key       String
  value     String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Wishlist {
  userId    Int
  productId String
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, productId])
}

model Cart {
  userId    Int
  productId String
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, productId])
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  createdAt   DateTime    @default(now())
  addressId   Int
  paymentId   String?
  totalAmount Float
  address     Address     @relation(fields: [addressId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id             Int       @id @default(autoincrement())
  orderId        Int
  productId      String
  quantity       Int
  price          Float
  name           String
  status         String    @default("pending")
  expectedDate   DateTime?
  courierPartner String?
  trackingId     String?
  order          Order     @relation(fields: [orderId], references: [id])
  product        Product   @relation(fields: [productId], references: [id])
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  name       String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  orders     Order[]
}

model Review {
  id        Int      @id @default(autoincrement())
  productId String
  userId    Int
  rating    Int      @db.SmallInt
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
}
